#!/bin/bash
set -e
set -u

## Global variables
tool=""
input=""
valid_tools=("fsl" "afni" "freesurfer" "all_any" "all_all")

## Functions
printhelp(){
        echo -e "Mandatory flags:\n" \
		"\t-i input_file\t: Specify the input file (nifti).\n" \
                "\t-t tool\t\t: What tool to use. Accepted options: fsl, afni, freesurfer, all_any, all_all (case insensitive).\n" \
                "\t\t\tall_any will use all the tools and create a final mask with those voxels that are part of ANY of the masks.\n" \
                "\t\t\tall_all will use all the tools and create a final mask with those voxels that are part of ALL of the masks.\n\n" \
		\
                "Optional flags:\n" \
                "\t-h\t: Print help.\n" \
                "\t-e\t: Expand the output mask.\n" \
                "\t-d\t: Dilate the output mask.\n\n" \
		\
                "There will be two output files, the brain mask with suffix _mask, and the brain extracted file with suffix _brain.\n" \
                "Holes will be automatically filled.\n" \
                "If the input file is 4D, the output file will be too, but the mask will be based on the first volume only.\n" \
		"Intermediary files will be removed.\n"

	exit
}

## Main code
# Read arguments
while getopts "ht:i:" opt
do
	case $opt in
		h)
		   printhelp
		   ;;
		t)
		   tool=${OPTARG,,}
		   ;;
		i)
		   input=$OPTARG
		   ;;
		\?) # Handle invalid options
		   echo "Invalid option: -$OPTARG" >&2
		   exit 1
		   ;;
		:) # Handle missing arguments for options
		   echo "Option -$OPTARG requires an argument." >&2
		   exit 1
		   ;;
	esac
done

# Do checks
if [ "${input}" == "" ] || [ "${tool}" == "" ]; then
	echo -e "Missing mandatory flags.\n"
	printhelp
fi

if ! printf '%s\0' "${valid_tools[@]}" | grep -Fxqz -- "${tool}"; then
	echo -e "${tool} is not an acceptable tool for this script.\n"
	printhelp
fi

[ ! -f "${input}" ] && echo -e "Input file ${input} not found.\n" && exit 1
if [[ "${input}" == *".nii.gz" ]]; then
	ext=".nii.gz"
elif [[ "${input}" == *".nii" ]]; then
	ext=".nii"
else
	echo "Input file must be in nifti format"
	exit
fi

# Pre-process 4D file if applicable
# Get the number of volumes
nvols=$(fslval "${input}" dim4)
# If it's a 4D file, separate each volume
if [ $nvols -gt 1 ]; then
	splitdir="${input/$ext/}"
	mkdir "${splitdir}"
	fslsplit "${input}" "${splitdir}/vol"
	b0=$(find "${splitdir}" -maxdepth 1 -type f | sort | head -n 1)
else
	b0="${input}"
fi

# Remove extension from input file
b0="${b0/$ext/}"

# Extract using FSL
if [ "${tool}" == "fsl" ]; then
	bet "${b0}" "${b0}" -f 0.1 -g 0 -n -m

# Extract using AFNI
elif [ "${tool}" == "afni" ]; then
	3dSkullStrip -input "${b0}.nii.gz" -mask_vol -prefix "${b0}_mask"

# Extract using Freesurfer
elif [ "${tool}" == "freesurfer" ]; then
	mri_synthstrip -i "${b0}.nii.gz" -m "${b0}_mask.nii.gz"

# Extract using all tools
else
	# List of processes
	pid_array=()

	bet "${b0}" "${b0}" -f 0.1 -g 0 -n -m &
	pid_array[${#pid_array[@]}]=$!

	3dSkullStrip -input "${b0}.nii.gz" -mask_vol -prefix "${b0}_afni.nii.gz" > /dev/null 2>&1 &
	pid_array[${#pid_array[@]}]=$!

	mri_synthstrip -i "${b0}.nii.gz" -m "${b0}_freesurfer.nii.gz" &
	pid_array[${#pid_array[@]}]=$!

	# Wait for all processes to finish
	wait "${pid_array[@]}"

	# Rename FSL mask
	mv "${b0}_mask.nii.gz" "${b0}_fsl.nii.gz"
fi

# Create final mask if using all tools

# Post-process 4D file if applicable

# Mask brain
